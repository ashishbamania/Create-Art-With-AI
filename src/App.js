import { React, useState } from "react";
import axios from "axios";

import "./App.css";

import TextField from "@mui/material/TextField";
import { LoadingButton } from "@mui/lab";
import { Button } from "@mui/material";

const BACKEND_DEPLOY_PATH = "https://gpt-dalle-express-backend.onrender.com";

function App() {
  const [inputText, setInputText] = useState("");
  const [response, setResponse] = useState("");
  const [imageUrl, setImageUrl] = useState("");
  const [isChatButtonLoading, setIsChatButtonLoading] = useState(false);
  const [isDrawButtonLoading, setIsDrawButtonLoading] = useState(false);

  const handleSubmit__chat = () => {
    setIsChatButtonLoading(true);
    axios
      .post(`${BACKEND_DEPLOY_PATH}/chat`, {
        prompt: inputText,
      })
      .then((res) => {
        setResponse(res.data);
        setIsChatButtonLoading(false);
      })
      .catch((error) => {
        console.log(error.message);
        setIsChatButtonLoading(false);
      });
  };

  const handleSubmit__draw = () => {
    setIsDrawButtonLoading(true);
    axios
      .post(`${BACKEND_DEPLOY_PATH}/draw`, {
        prompt: response,
      })
      .then((res) => {
        setImageUrl(res.data);
      })
      .catch((error) => {
        console.log(error.message);
        setIsDrawButtonLoading(false);
      });
  };

  return (
    <div className="main">
      <h1>Create Art With AI</h1>

      <p className="desc">
        Try: "Describe an image of London on an autumn day in 8 lines."
      </p>

      <TextField
        id="outlined-basic"
        variant="outlined"
        fullWidth
        label="Type here"
        value={inputText}
        onChange={(e) => setInputText(e.target.value)}
      />
      <LoadingButton
        variant="outlined"
        type="submit"
        onClick={handleSubmit__chat}
        disabled={inputText === ""}
        loading={isChatButtonLoading}
      >
        Generate Description
      </LoadingButton>

      <p className="response">{response !== "" && `"${response}"`}</p>

      <>
        {response && (
          <div className="responseButtons">
            <LoadingButton
              variant="outlined"
              type="submit"
              onClick={handleSubmit__draw}
              loading={isDrawButtonLoading}
            >
              Generate Image
            </LoadingButton>

            <Button variant="outlined" onClick={() => window.location.reload()}>
              Reset
            </Button>
          </div>
        )}
      </>

      <>
        {imageUrl && (
          <img
            alt="Generated by DALL-E"
            src={imageUrl}
            className="genImage"
            onLoad={() => setIsDrawButtonLoading(false)}
          />
        )}
      </>

      <p className="footer-heart">
        Made with{" "}
        <g-emoji
          className="g-emoji"
          alias="heart"
          fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"
        >
          <img
            className="emoji"
            alt="heart"
            height="20"
            width="20"
            src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png"
          />
        </g-emoji>
        {"  "}
        by{" "}
        <a
          href="https://bamania-ashish.medium.com"
          target="_blank"
          rel="noreferrer"
        >
          Ashish Bamania
        </a>
      </p>
    </div>
  );
}

export default App;
